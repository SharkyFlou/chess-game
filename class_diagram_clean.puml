 @startuml


'a faire, trouver comment faire le "enroque"

    skinparam style strictuml
    skinparam classAttributeIconSize 0
    skinparam classFontStyle Bold
    hide enum methods

    class Main{
        + main() : int
    }


' allait dans board, changé
' + movePiece(oldPosX : Integer, oldPosY : Integer, newPosX : Integer, newPosY : Integer)


    package model{
        class Board{
            + Board()
            + initBoard()
            + getPiece(posX : Integer, posY : Integer)
            + movePiece(oldPosX : Integer, oldPosY : Integer, newPosX : Integer, newPosY : Integer)
            + doesCaseContainPlayerPiece(posX : Integer, posY : Integer, team Boolean) : Boolean
            + destroyPiece(posX : Integer, posY : Integer)
            + addObs(obs : InteractionsObserver)
            - notifyPieceTaken(team : Boolean, imageLink : String)
            - notifyMov()
        }

        class Mover{
            - casesPreviewedMvt : Boolean[]
            - casesPreviewedAtk : Boolean[]
            + Mover()
            + setBoard(gaveBoard : Board)
            + isCasePreviewMvt(posX : Integer, posY : Integer) : Boolean
            + isCasePreviewAtk(posX : Inteer, posY : Integer) : Boolean
            + emptyPreviews()
            + initializePreviews() : Boolean[]
            + calculateRealMvt(posY : Integer, posX : Integer)
            + calculateRealAtk(posY : Integer, posX : Integer)
            - calculateMvtAtkPawn(posY : Integer, posX : Integer, mvtAtk : Boolean, piece : Piece) : Boolean[]
            ' the Boolean mvts, when true calcul the mvt, when false calcul the atk
            - calculateMvtAtkPlus(posY : Integer, posX : Integer, mvtAtk : Boolean, reach : Integer, piece : Piece) : Boolean[]
            - calculateMvtAtkCross(posY : Integer, posX : Integer, mvtAtk : Boolean, reach : Integer, piece : Piece) : Boolean[]
            - calculateMvtAtkKnight(posY : Integer, posX : Integer, mvtAtk : Boolean, piece : Piece) : Boolean[]
            - calculateMvtAtkPlusCross(posY : Integer, posX : Integer, mvtAtk : Boolean, reach : Integer, piece : Piece) : Boolean[]
            + addObserver(obs : PreviewObserver)
            - notifyObsDisplayAtk(cases : Boolean[])
            - notifyObsDisplayMvt(cases : Boolean[])
            - notifyObsEraseDisplay()
        }

        interface PreviewObserver{
            + {abstract} displayPreviewAtk(atkCases : Boolean[])
            + {abstract} displayPreviewMvt(mvtCases : Boolean[])
            + {abstract} erasePreview()
        }

        abstract class Piece{
            - pieceName : String
            - value : Integer
            - team : Boolean
            - imageLink : String

            + Piece(team : Boolean) 
            + getTeam() : Boolean
            + getValue() : Integer
            + getPieceName() : String
        }

        class Pawn implements FirstMovement{
            + Pawn(team : Boolean)
            + pawnMovement()
            + pawnAttack()
        }

        abstract class FirstMovement implements Piece{
            - hasMadeFirstMove : Boolean
            + getHasMoved() : Boolean
            + moove()
        }

        class King implements FirstMovement{
            + King(team : Boolean)
            + kingMovement()
        }

        class Queen implements Piece{
            + Queen(team : Boolean)
            + queenMovement()
        }

        class Bishop implements Piece{
            + Bishop(team : Boolean) 
            + bishopMouvement()
        }

        class Rook implements FirstMovement{
            + Rook(team : Boolean)
            + rookMouvement()
        }

        class Knight implements Piece{
            + Knight(team : Boolean)
            + knightMovement()
        }

        interface BoardObserver{
            + {abstract} DisplayGame()
            + {abstract} displayPromotion(posX : Integer, posY : Integer)
        }

        class Manager{
            - whitePts : Integer
            - blackPts : Integer
            - notifyWin(team : Boolean)
            - notifyDraw()
            + addPoints(team : Boolean, pts : Integer)
            + getPoints(team : Boolean)
            + addObs(obs : ScoreObserver)
            + notifyObsPtsChanged(team : Boolean, pts : Integer)
        }

        interface ScoreObserver{
            + {abstract} DisplayScore(team : Boolean, points : Integer)
        }


    }
' + caseInfo(posx : Integer, posy : Integer)


' 
    package controller{

        class Supervisor{
            - lastClickedPiecePosx : Integer
            - lastClickedPiecePosy : Integer 
            ' on garde pas une piece en privé car on peut trouver la piece selon sa position
            + Supervisor()
            + setMoverAndBoard(gaveMover : Mover, gaveBoard : Board)
            + clickedOnSomeCase(posX : Integer, posY : Integer, team : Boolean) : Boolean
        }

        class GameFacade{
            - team : Boolean
            + clickedOnSomeCase(posx : Integer, posy : Intenger)
            + turnEnd()
            + draw()
            + win()
        }

    }

    package view{
        class DisplayBoard{
            + DisplayBoard()
            + setBoard()
            + setGameFacadeAndBoard(gaveGameFacade : GameFacade, gaveBoard : Board)
            + clickedOnCase(posx : Integer, posy : Integer)
            + displayGame()
            + displayPreviewMvt(previews : Boolean[])
            + displayPreviewAtk(previews : Boolean[])
            + displayPromotion(posX : Integer, posY : Integer)
            + erasePreview()
        }

        class DisplayGame{
            + displayWin(team : Boolean)
            + displayDraw()
            + displayPieceTaken(team : Boolean, imageLink : String)
            + displayScore(team : Boolean)
        }

        class Terminal{
            + setBoard()
            + clickedOnCase(posx : Integer, posy : Integer)
            + displayPreview(previews : Boolean[], typeMvt : Boolean)
            + displayPromotion(posX : Integer, posY : Integer)
            + hidePreview()
        }

        class PanelScore extends JPanel{
            - team : Boolean
            + PanelScore(team : Boolean)
            + DisplayScore(team : Boolean, points : Integer)
        }

        
    }

'class PanelBoard{}
'class PanelPlayer{}

    'main
    Main ..> Board : > instantiate 
    Main ...> GameFacade : > instantiate 
    Main ..> DisplayBoard : > instantiate 
    Main ..> Terminal : > instantiate 
    Main ..> Supervisor : > instantiate 
    Main ..> Manager : > instantiate 
    Main ..> Mover : > instantiate 
    
    'view
    'DisplayBoard o-d-> PanelBoard : "use >"
    'DisplayBoard o--> PanelPlayer : "use >"

    'model
    Board  o--> "*\n -observers" BoardObserver : > is observed by
    Manager  o--> "*\n -observers" ScoreObserver : > is observed by
    Mover  o--> "*\n -observers" PreviewObserver : > is observed by
   
    ' Piece <|.down.. Knight 
    ' Piece <|.down.. Pawn 
    ' Piece <|.down.. Bishop 
    ' Piece <|.down.. Rook 
    ' Piece <|.down.. King 
    ' Piece <|.down.. Queen 

    Board ..> Pawn : > instantiate 
    Board ..> Knight : > instantiate 
    Board ..> Bishop : > instantiate 
    Board ..> Rook : > instantiate 
    Board ..> King : > instantiate 
    Board ..> Queen : > instantiate 

    Board *-> "*\n-pieces" Piece : > contains

    'controller
    GameFacade o--> "1\n-supervisor " Supervisor : > own
   

    'view
    DisplayBoard *-> "1\npanelScoreWht" PanelScore : > own
    DisplayBoard *-> "1\npanelScoreBlk" PanelScore : > own

    'relation view - controller
    'cette relation envoie la position de la case cliquee a controller
    DisplayBoard o-right-> "1\n-gameFacade" GameFacade : > calls  
    GameFacade -> DisplayGame : > display
    
    'relation view - model
    Terminal ..|> ScoreObserver : ""
    DisplayBoard .down.|> BoardObserver : ""
    DisplayBoard .down.|> PreviewObserver : ""
    DisplayBoard o-down-> "1\n-board" Board : > watch
    PanelScore ..|> ScoreObserver

    'relation controller - model
    Supervisor o--> "1\n -board" Board : > watch 
    Supervisor o-r-> "1\n -mover" Mover : > own 


    'layout
    Supervisor o-> "1\n -manager" Manager : > calls 
    
    'DisplayBoard -[hidden]> Supervisor : "consults >"

    Mover  o-> "1\n -board" Board : > watch
    Mover .u.> Rook : > uses
    Mover .u.> Pawn : > uses
    Mover .u.> King : > uses
    Mover .u.> Bishop : > uses
    Mover .u.> Queen : > uses


    @enduml