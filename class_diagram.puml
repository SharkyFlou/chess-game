    @startuml


'a faire, trouver comment faire le "enroque"

    skinparam style strictuml
    skinparam classAttributeIconSize 0
    skinparam classFontStyle Bold
    hide enum methods

    class Main{
        + main() : int
    }

    package Controller{
        class GameFacade{
            - nextToPlay : Boolean
            + clickedOnSomeCase(posX  : Integer, posY : Integer)
            + changePiecePromotion(posX : Integer, posY : Integer)
            + play()
            + draw()
            + win()
        }
    }


    package Model{

        class Supervisor{ 
            - previewCasesMvmt : Boolean[] 
            - previewCasesAtk : Boolean[] 

            + Supervisor()
            + clickedOnSomeCase(posX : Integer, posY : Integer, team : Boolean)
            - isCasePreviewMvmt(posX : Integer, posY : Integer) : Boolean
            - isCasePreviewAtk(posX : Integer, posY : Integer) : Boolean
            - pawnMvmt()
            - pwnAtk()
            - bishopMvmt()
            - queenMvmt()
            + addObs(obs : InteractionsObserver)
            - notifyPrev()
            - notifyEndPrev()
            - notifyPromotion()
        }

        class Manager{
            - whitePts : Integer
            - blackPts : Integer
            + addPoints(team : Boolean, pts : Integer)
            + getPoints(team : Boolean)
            + addObs(obs : InteractionsObserver)
            - notifyWin(team : Boolean)
            - notifyDraw()
        }

        class Board{
            + Board()
            + initBoard()
            + getPiece(posX : Integer, posY : Integer)
            + doesCaseContainPlayerPiece(posX : Integer, posY : Integer, team Boolean) : Boolean
            + movePiece(oldPosX : Integer, oldPosY : Integer, newPosX : Integer, newPosY : Integer)
            + destroyPiece(posX : Integer, posY : Integer)
            + addObs(obs : InteractionsObserver)
            - notifyPieceTaken(team : Boolean, imageLink : String)
            - notifyMov()
        }

        

        
        
        abstract class Piece{
            - chessName : String
            - value : Integer
            - team : Boolean
            - imageLink : String

            + Piece(team : Boolean) : Piece 
            + getTeam() : Boolean
            + getValue() : Integer
            + getChessName() : String
        }

        class Pawn implements Piece{
            + Pawn(team : Boolean)
            - HasMadeFirstMove : Boolean
            + getHasMoved() : Boolean
            + Moove()
        }

        class King implements Piece{
            + King(team : Boolean)
        }

        class Queen implements Piece{
            + Queen(team : Boolean)
        }

        class Bishop implements Piece{
            + Bishop(team : Boolean) 
        }

        class Rook implements Piece{
            + Rook(team : Boolean)
        }

        class Knight implements Piece{
            + Knight(team : Boolean)
        }

        interface GameObservers{
            + DisplayGame(pieces : Piece[]) {abstract}
            + displayPreview(previews : Boolean[] , typeMvmt : Boolean) {abstract}
            + displayPromotion(posX : Integer, posY : Integer)
            + hidePreview() {abstract}
            + displayWin(team : Boolean)
            + displayDraw()
            
        }
    }

    package View{
        'two observers
        'this one is displaying everything with swing
         class DisplayGame implements GameObservers{
            + DisplayGame(pieces : Piece[] )
            + displayPreview(previews : Boolean[], typeMvmt : Boolean)
            + displayPromotion(posX : Integer, posY : Integer)
            + hidePreview()
            + displayWin(team : Boolean)
            + displayDraw()
            + displayPieceTaken(team : Boolean, imageLink : String)
        }

        class Terminal implements GameObservers{
            + DisplayGame(piece[] pieces)
            + displayPreview(Boolean[] previews, Boolean typeMvmt)
            + displayPromotion(posX : Integer, posY : Integer)
            + hidePreview()
            + displayWin(team: Boolean)

            + displayDraw()
            + displayPieceTaken(team : Boolean, imageLink : String)
        }
    }

    GameFacade "1\n Supervisor" o-> Supervisor : "own >"
    GameFacade "1\n manager" o-> Manager : "own >"
    

    Supervisor ..> PieceFactory : "uses >"
    Supervisor "*\n observers" o--> GameObservers : "is observed by"
    Supervisor "1\nboard" *-d-> Board : "own >" 
    
    Board ..d.> Pawn : "instantiate >"
    Board ..d.> King : "instantiate >"
    Board ..d.> Queen : "instantiate >"
    Board ..d.> Bishop : "instantiate >"
    Board ..d.> Rook : "instantiate >"
    Board ..d.> Knight : "instantiate >"

    Board "pieces\n*" -l-> Piece : " contains >"
    Board "*\n observers" o--> GameObservers : "is observed by"


    Main .d.> GameFacade : "instantiate >"
    Main .d.> DisplayGame : "instantiate >"
    Main .d.> Terminal : "instantiate >"
    Main .d.> Supervisor : "instantiate >"
    Main .d.> Manager : "instantiate >"

    DisplayGame "1\nfacade" o-u-> GameFacade : "owns >"
    Terminal "1\nfacade" o-u-> GameFacade : "owns >"

    @enduml