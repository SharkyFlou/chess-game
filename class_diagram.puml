    @startuml

    skinparam style strictuml
    skinparam classAttributeIconSize 0
    skinparam classFontStyle Bold
    hide enum methods

    class Main{
        + main() : int
    }

    package Controller{
        class GameFacade{
            - nextToPlay : Boolean
            
            
            + clickedOnSomeCase(posX  : Integer, posY : Integer)
            + play()
            + tare()
            + win()
        }

        
    }

    


    package Model{


        class PieceFactory{
            + createPawn(team : Boolean) : Piece
            + createKing(team : Boolean) : Piece
            + createQueen(team : Boolean) : Piece
            + Bishop(team : Boolean) : Piece
            + createRook(team : Boolean) : Piece
            + createKnight(team : Boolean) : Piece
        }
        

        class Board{
            - allPieceImages : Image[] 
            - whitePts : Integer
            - blackPts : Integer
            - previewCasesMvmt : Boolean[] 
            - previewCasesAtk : Boolean[] 

            + Board() : Board
            + clickedOnSomeCase(posX : Integer, posY : Integer, team : Boolean) : Result
            - isCasePreviewMvmt(posX : Integer, posY : Integer) : Boolean
            - isCasePreviewAtk(posX : Integer, posY : Integer) : Boolean
            - isCaseContainPlayerPiece(posX : Integer, posY : Integer, team Boolean) : Boolean
            - movePiece(oldPosX : Integer, oldPosY : Integer, newPosX : Integer, newPosY : Integer)
            - destroyPiece(posX : Integer, posY : Integer)
            - getPiece(posX : Integer, posY : Integer)
            - notifyObsPrev()
            - notifyObsEndPrev()
            - notifyObsMov()
            + addObs(obs : BoardObserver)
            + initBoard()
            + win(team : Boolean)
            - notifyObsWin(team : Boolean)
            + tare()
            - notifyObsTare()
        }

        
        
        abstract class Piece{
            - chessName : String
            - value : Integer
            - team : Boolean
            - imageLink : String

            + Piece(team : Boolean) : Piece 
            + movementBase(pieces : Piece[] , posX : Integer, posY : Integer) : Boolean[] {abstract}
            + attackMovement(pieces : Piece[] , posX : Integer, posY : Integer) : Boolean[] {abstract}
            + getTeam() : Boolean
            + getValue() : Integer
            + getChessName() : String
        }

        class Pawn implements Piece{
            + Pawn(team : Boolean) : Pawn 
            + movementBase(pieces : Piece[] , posX : Integer, posY : Integer) : Boolean[]
            + attackMovement(pieces : Piece[] , posX : Integer, posY : Integer) : Boolean[]
            -HasMadeFirstMove : Boolean
        }

        class King implements Piece{
            + King(team : Boolean) : King 
            + movementBase(pieces : Piece[] , posX : Integer, posY : Integer) : Boolean[]
            + attackMovement(pieces : Piece[] , posX : Integer, posY : Integer) : Boolean[]
        }

        class Queen implements Piece{
            + Queen(team : Boolean) : Queen 
            + movementBase(pieces : Piece[] , posX : Integer, posY : Integer) : Boolean[]
            + attackMovement(pieces : Piece[] , posX : Integer, posY : Integer) : Boolean[]
        }

        class Bishop implements Piece{
            + Bishop(team : Boolean) : PawBishopn 
            + movementBase(pieces : Piece[] , posX : Integer, posY : Integer) : Boolean[]
            + attackMovement(pieces : Piece[] , posX : Integer, posY : Integer) : Boolean[]
        }

        class Rook implements Piece{
            + Rook(team : Boolean) : Rook 
            + movementBase(pieces : Piece[] , posX : Integer, posY : Integer) : Boolean[]
            + attackMovement(pieces : Piece[] , posX : Integer, posY : Integer) : Boolean[]
        }

        class Knight implements Piece{
            + Knight(team : Boolean) : Knight 
            + movementBase(pieces : Piece[] , posX : Integer, posY : Integer) : Boolean[]
            + attackMovement(pieces : Piece[] , posX : Integer, posY : Integer) : Boolean[]
        }

        interface BoardObservers{
            + displayBoard(pieces : Piece[]) {abstract}
            + displayPreview(previews : Boolean[] , typeMvmt : Boolean) {abstract}
            + hidePreview() {abstract}
            + displayWin(team : Boolean)
            + displayTare()
            
        }

        Enum Result{
            WIN
            NEXT
            TARE
            NOTHING
        }
    }

    package View{

        'two observers
        'this one is displaying everything with swing
         class DisplayBoard implements BoardObservers{
            + displayBoard(pieces : Piece[] )
            + displayPreview(previews : Boolean[], typeMvmt : Boolean)
            + hidePreview()
            + displayWin(team : Boolean)
            + displayTare()
        }

        class Terminal implements BoardObservers{
            + displayBoard(piece[] pieces)
            + displayPreview(Boolean[] previews, Boolean typeMvmt)
            + hidePreview()
            + displayWin(team: Boolean)
            + displayTare()
        }
    }

    
    

    'Terminal o-> PreviewMovement
   

    GameFacade "1\n board" o-> Board : "own >"
    GameFacade ..> Result : "use >"
    


    Board "pieces\n*" -> Piece : "contains >"

    Board ..> PieceFactory : "uses >"
    Board "*\n observers" o-> BoardObservers : "is observed by"
    Board ..> Result : "use >"
    
    PieceFactory .d.> Pawn : "instantiate >" 
    PieceFactory .d.> King : "instantiate >" 
    PieceFactory .d.> Queen : "instantiate >" 
    PieceFactory .d.> Bishop : "instantiate >" 
    PieceFactory .d.> Rook : "instantiate >" 
    PieceFactory .d.> Knight : "instantiate >" 

    BoardObservers ..|> Board : "Observes"

    Main .d.> GameFacade : "instantiate >"
    Main .d.> DisplayBoard : "instantiate >"
    Main -.d.> Terminal : "instantiate >"

    DisplayBoard o-u-> GameFacade : "owns >"




    @enduml